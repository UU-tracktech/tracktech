image:
  name: docker/compose:latest

stages:
  - build
  - unittest
  - integrationtest
  - linting
  - documentation
  - deploy

camera_processor_documentation:
  stage: documentation
  trigger:
    include: CameraProcessor/.gitlab-ci-docs.yml
  rules:
    - when: never
      changes:
        - CameraProcessor/**/*

camera-processor_docker_build:
  stage: build
  script:
    - cd CameraProcessor
    - docker build --target=test -t camera-processor .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/**/*
      when: always
    - if: '$PIPELINE == "camera_processor"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always
    - if: '$PIPELINE == "integration_testing"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always
        
camera-processor_unit-testing:
  stage: unittest
  needs: [camera-processor_docker_build]
  before_script:
    - docker rm -f camera-processor-test-container || true
  script:
    - docker run --name camera-processor-test-container camera-processor pytest --cov-config=.coveragerc --cov-report term --cov-report xml --cov-report html --cov=processor/ --junitxml=cp-unit-report.xml tests/unittests
  after_script:
    - docker cp camera-processor-test-container:/app/cp-unit-report.xml cp-unit-report.xml
    - docker cp camera-processor-test-container:/app/coverage.xml cp-coverage.xml
    - docker cp camera-processor-test-container:/app/coverage_html cp-coverage_html
    - docker stop camera-processor-test-container
  artifacts:
    reports:
      junit: cp-unit-report.xml
      cobertura: cp-coverage.xml
    paths:
      - cp-coverage_html
    when: always 
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/**/*
      when: always
    - if: '$PIPELINE == "camera_processor"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always
  

camera-processor_integration-testing:
  stage: integrationtest
  needs: [camera-processor_docker_build]
  script:
    - docker rm -f processor-integration-test-container || true
    - docker-compose -f ./CameraProcessor/docker-compose+orchestrator.yml up --build --exit-code-from camera-processor-test-service
  after_script:
    - docker cp processor-integration-test-container:/app/cp-integration-report.xml cp-integration-report.xml
    - docker-compose -f ./CameraProcessor/docker-compose+orchestrator.yml down
  artifacts:
    reports:
      junit: cp-integration-report.xml
    when: always
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/**/*
      when: always
    - if: '$PIPELINE == "camera_processor"'
      when: always
    - if: '$PIPELINE == "integration_testing"'
      when: always

camera-processor-video-forwarder_integration-testing:
  stage: integrationtest
  needs: [camera-processor_docker_build]
  script:
    - docker rm -f processor-forwarder-integration-test-container || true
    - docker-compose -f ./CameraProcessor/docker-compose+forwarder.yml up --force-recreate --build --exit-code-from camera-processor-test-service
  after_script:
    - docker cp processor-forwarder-integration-test-container:/app/cp-f-integration-report.xml cp-f-integration-report.xml
    - docker-compose -f ./CameraProcessor/docker-compose+forwarder.yml down
  artifacts:
    reports:
      junit: cp-f-integration-report.xml
    when: always
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/**/*
      when: always
    - if: '$PIPELINE == "camera_processor"'
      when: always
    - if: '$PIPELINE == "integration_testing"'
      when: always

camera-processor_linting:
  stage: linting
  needs: [camera-processor_docker_build]
  before_script:
    - docker rm -f camera-processor-lint-container || true
    - docker build --target=lint -t camera-processor-lint ./CameraProcessor
  script:
    - docker run -d -t --name camera-processor-lint-container camera-processor-lint
    - docker cp .pylintrc camera-processor-lint-container:/app
    - docker cp utility/pylint_ignore.py camera-processor-lint-container:/app/utility
    - docker cp utility/__init__.py camera-processor-lint-container:/app/utility
    - docker exec camera-processor-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
  after_script:
    - docker stop camera-processor-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/**/*
      when: always
    - if: '$PIPELINE == "camera_processor"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always

orchestrator_docker_build:
  stage: build
  script:
    - docker build -t processor-orchestrator --target=testing ./ProcessorOrchestrator
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/**/*
      when: always
    - if: '$PIPELINE == "processor_orchestrator"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always

orchestrator_unit-testing:
  stage: unittest
  needs: [orchestrator_docker_build]
  before_script:
    - docker rm -f po-unit-testing || true
    - docker build -t processor-orchestrator --target=testing ./ProcessorOrchestrator
  script:
    - docker run --name po-unit-testing processor-orchestrator pytest testing/unit_testing --cov-config=.coveragerc --cov=src --cov-report=html --cov-report=xml --cov-report=term --junitxml=po-unit-report.xml
  after_script:
    - docker cp po-unit-testing:po-unit-report.xml po-unit-report.xml
    - docker cp po-unit-testing:/po_coverage_html po_coverage_html
    - docker cp po-unit-testing:/coverage.xml po-coverage.xml
    - docker stop po-unit-testing processor-orchestrator
  artifacts:
    reports:
      junit: po-unit-report.xml
    paths:
      - po_coverage_html
      - po-coverage.xml
    expire_in: 10 days
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/**/*
      when: always
    - if: '$PIPELINE == "processor_orchestrator"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always

orchestrator_integration-testing:
  stage: integrationtest
  dependencies: 
    - orchestrator_unit-testing
  needs: [orchestrator_unit-testing]
  before_script:
    - docker build -t processor-orchestrator --target=testing ./ProcessorOrchestrator
  script:
    - docker-compose -f ProcessorOrchestrator/docker-compose.testing.yml up --build --no-start
    - docker cp po_coverage_html processor-orchestrator-service:/
    - docker cp po-coverage.xml processor-orchestrator-service:/coverage.xml
    - docker-compose -f ProcessorOrchestrator/docker-compose.testing.yml up --exit-code-from processor-orchestrator-integration-tests
    - docker cp processor-orchestrator-service:integration-report.xml integration-report.xml
    - docker cp processor-orchestrator-service:/po_coverage_html /
    - docker cp processor-orchestrator-service:/coverage.xml po-coverage.xml
  after_script:
    - docker-compose -f ./ProcessorOrchestrator/docker-compose.testing.yml down
  artifacts:
    reports:
      junit: integration-report.xml
      cobertura: po-coverage.xml
    paths:
      - po_coverage_html
      - po-coverage.xml
    when: always
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/**/*
      when: always
    - if: '$PIPELINE == "processor_orchestrator"'
      when: always
    - if: '$PIPELINE == "integration_testing"'
      when: always

orchestrator_linting:
  stage: linting
  needs: [orchestrator_docker_build]
  before_script:
    - docker rm -f orchestrator-lint-container || true
    - docker build -t processor-orchestrator --target=testing ./ProcessorOrchestrator
  script:
    - docker run -d -t --name orchestrator-lint-container processor-orchestrator
    - docker cp .pylintrc orchestrator-lint-container:/
    - docker cp utility/pylint_ignore.py orchestrator-lint-container:/utility/
    - docker cp utility/__init__.py orchestrator-lint-container:/utility/
    - docker exec orchestrator-lint-container pylint src testing --rcfile=.pylintrc --output-format=colorized
  after_script:
    - docker stop orchestrator-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/**/*
      when: always
    - if: '$PIPELINE == "processor_orchestrator"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always

interface_docker_build:
  stage: build
  script:
    - cd Interface
    - docker build -t interface -f Dockerfile.test .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/**/*
      when: always
    - if: '$PIPELINE == "interface"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always

interface_unit-testing:
  stage: unittest
  needs: [interface_docker_build]
  before_script:
    - docker rm -f interface-unit-test-container || true
  script:
    - docker run --name interface-unit-test-container interface
  after_script:
    - docker cp interface-unit-test-container:/react/coverage i-coverage
    - docker stop interface-unit-test-container
  artifacts:
    when: always
    paths:
      - i-coverage
    expire_in: 5 days
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/**/*
      when: always
    - if: '$PIPELINE == "interface"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always

interface_integration-testing:
  stage: integrationtest
  needs: [interface_docker_build]
  before_script:
    - docker rm -f processor-orchestrator-service || true
    - docker rm -f interface-integration-test-container || true
  script:
    - docker-compose -f Interface/docker-compose.testing.yml up --exit-code-from interface-test-service
    - docker cp interface-integration-test-container:/react/coverage i-coverage
  after_script:
    - docker-compose -f Interface/docker-compose.testing.yml down
  artifacts:
    when: always
    paths:
      - i-coverage
    expire_in: 5 days
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/**/*
      when: always
    - if: '$PIPELINE == "interface"'
      when: always
    - if: '$PIPELINE == "integration_testing"'
      when: always

interface-linting-selenium:
  stage: linting
  needs: [interface_docker_build]
  before_script:
    - cd Interface
    - docker build -t interface_linting -f Dockerfile_lint .
    - docker rm -f interface-lint-container || true
  script:
    - cd ..
    - docker run -d -t --name interface-lint-container interface_linting
    - docker cp .pylintrc interface-lint-container:/app
    - docker cp utility/pylint_ignore.py interface-lint-container:/app/utility
    - docker cp utility/__init__.py interface-lint-container:/app/utility
    - docker exec interface-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
  after_script:
    - docker stop interface-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/**/*
      when: always
    - if: '$PIPELINE == "interface"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always

interface-linting-ESLint:
  stage: linting
  needs: [interface_docker_build]
  allow_failure: true
  before_script:
    - cd Interface
    - docker build -t interface_linting -f Dockerfile_eslint .
    - docker rm -f interface-lint-container || true
  script:
    - docker run --name interface-lint-container interface_linting
  after_script:
    - docker stop interface-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/**/*
      when: always
    - if: '$PIPELINE == "interface"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always

video-forwarder_docker_build:
  stage: build
  script:
    - cd VideoForwarder
    - docker build --target=testing -t video-forwarder .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/**/*
      when: always
    - if: '$PIPELINE == "forwarder"'
      when: always
      
video-forwarder_unit-testing:
  stage: unittest
  needs: [video-forwarder_docker_build]
  before_script:
    - docker rm -f video-forwarder-test-container || true
  script:
    - docker run --env CONFIG_PATH="/NetworkConfig.json" --env STREAM_FOLDER="/streams" --name video-forwarder-test-container video-forwarder pytest --cov-config=.coveragerc --cov-report term --cov-report html --cov=src/ --junitxml=vf-unit-report.xml test/unittest
  after_script:
    - docker cp video-forwarder-test-container:/vf-unit-report.xml vf-unit-report.xml
    - docker cp video-forwarder-test-container:/htmlcov vf-coverage_html
    - docker stop video-forwarder-test-container
  artifacts:
    reports:
      junit: vf-unit-report.xml
    paths:
      - vf-coverage_html
    when: always 
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/**/*
      when: always
    - if: '$PIPELINE == "forwarder"'
      when: always
    - if: '$PIPELINE == "unit_testing"'
      when: always
    
      
video-forwarder_integration-testing:
  stage: integrationtest
  needs: [video-forwarder_docker_build]
  script:
    - docker-compose -f ./VideoForwarder/docker-compose-test.yml up --force-recreate --build --exit-code-from video-forwarder-testing-service
  after_script:
    - docker cp video-forwarder_integration-testing-container:/vf-integration-report.xml vf-integration-report.xml
    - docker-compose -f ./VideoForwarder/docker-compose-test.yml down
  artifacts:
    reports:
      junit: vf-integration-report.xml
    when: always 
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/**/*
      when: always
    - if: '$PIPELINE == "forwarder"'
      when: always
    - if: '$PIPELINE == "integration_testing"'
      when: always

forwarder-linting:
  stage: linting
  needs: [video-forwarder_docker_build]
  before_script:
    - cd VideoForwarder
    - docker build -t forwarder_linting -f Dockerfile_lint .
    - docker rm -f forwarder-lint-container || true
  script:
    - cd ..
    - docker run -d -t --name forwarder-lint-container forwarder_linting
    - docker cp .pylintrc forwarder-lint-container:/app
    - docker cp utility/pylint_ignore.py forwarder-lint-container:/app/utility
    - docker cp utility/__init__.py forwarder-lint-container:/app/utility
    - docker exec forwarder-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
  after_script:
    - docker stop forwarder-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/**/*
      when: always
    - if: '$PIPELINE == "forwarder"'
      when: always
    - if: '$PIPELINE == "linting"'
      when: always
