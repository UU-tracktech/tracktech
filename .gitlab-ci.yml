stages:
  - build
  - test
  - documentation
  - deploy

camera_processor_documentation:
  stage: documentation
  trigger:
    include: CameraProcessor/.gitlab-ci-docs.yml
  rules:
    - when: never
      changes:
        - CameraProcessor/*

camera-processor_docker_test_build:
  stage: build
  script:
    - cd CameraProcessor
    - docker build -f Dockerfile.test -t camera-processor-test .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always
        
camera-processor_unit-testing:
  stage: test
  needs: [camera-processor_docker_test_build]
  script:
    - cd CameraProcessor
    - docker container prune -f
    - docker run --name camera-processor-test-container camera-processor-test python3.8 -m pytest tests/unittests --junitxml=report.xml
    - docker cp camera-processor-test-container:/app/report.xml report.xml
  artifacts:
    reports:
      junit: CameraProcessor/report.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always

orchestrator_docker_build:
  stage: build
  script:
    - docker build -t processor-orchestrator --target testing ./ProcessorOrchestrator
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always

orchestrator_unit-testing:
  stage: test
  needs: [orchestrator_docker_build]
  script:
    - docker run processor-orchestrator
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always
     

interface_docker_build:
  stage: build
  script:
    - cd interface
    - docker build -t interface -f Dockerfile.test .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - interface/*
      when: always

interface_unit-testing:
  stage: test
  needs: [interface_docker_build]
  script:
    - docker run interface
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - interface/*
      when: always

pylint:
  image: python:3.8.8
  stage: test
  script:
    - pip install pylint
    - pip install junit-xml
    - pip install pylint_junit
    - FILES=$(find . -name "*.py" | grep -v "ci-scripts/")
    - pylint ${FILES} --rcfile=.pylintrc --exit-zero
  artifacts:
    paths:
    - CameraProcessor
    reports:
      junit: report.xml


pyflakes:
  image: python:3.8.8
  stage: test
  script: |
    pip install pyflakes --rcfile=.pylintrc
    FILES=$(find . -name "*.py" | grep -v "ci-scripts/")
    python3 -m pyflakes ${FILES}
  rules:
    - when: never
