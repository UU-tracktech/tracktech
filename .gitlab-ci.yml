image:
  name: docker/compose:latest

stages:
  - removal
  - build
  - unittest
  - integrationtest
  - linting
  - documentation
  - deploy

camera_processor_documentation:
  stage: documentation
  trigger:
    include: CameraProcessor/.gitlab-ci-docs.yml
  rules:
    - when: never
      changes:
        - CameraProcessor/*

camera_container_removal:
  stage: removal
  script:
    - docker rm -f camera-processor-test-container || true
    - docker rm -f camera-processor-lint-container || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always

camera-processor_docker_build:
  stage: build
  script:
    - cd CameraProcessor
    - docker build --target=test -t camera-processor .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always
        
camera-processor_unit-testing:
  stage: unittest
  needs: [camera-processor_docker_build, camera_container_removal]
  script:
    - docker run --name camera-processor-test-container camera-processor python3.8 -m pytest --cov-config=.coveragerc --cov=processor --cov-report html --cov-report term --junitxml=cp-unit-report.xml tests/unittests
    - docker cp camera-processor-test-container:/app/cp-unit-report.xml cp-unit-report.xml
    - docker cp camera-processor-test-container:/app/coverage_html coverage_html
  artifacts:
    reports:
      junit: cp-unit-report.xml
    paths:
      - coverage_html
    when: always 
    expire_in: 10 days 
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always
  

camera-processor_integration-testing:
  stage: integrationtest
  needs: [camera-processor_docker_build, camera_container_removal]
  script:
    - cd CameraProcessor
    - docker-compose up --exit-code-from camera-processor-test-service
    - docker cp processor-integration-test-container:/app/cp-integration-report.xml cp-integration-report.xml
    - docker-compose down
  artifacts:
    reports:
      junit: CameraProcessor/cp-integration-report.xml
    when: always
    expire_in: 10 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always

camera-processor_linting:
  stage: linting
  needs: [camera-processor_docker_build, camera_container_removal]
  allow_failure: true 
  script:
    - docker build --target=lint -t camera-processor-lint ./CameraProcessor
    - docker run -d -t --name camera-processor-lint-container camera-processor-lint
    - docker cp .pylintrc camera-processor-lint-container:/app
    - docker cp utility/pylint_ignore.py camera-processor-lint-container:/app/utility
    - docker cp utility/__init__.py camera-processor-lint-container:/app/utility
    - docker exec camera-processor-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
    - docker stop camera-processor-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always

orchestrator_container_removal:
  stage: removal
  script:
    - docker rm -f po-unit-testing || true
    - docker rm -f orchestrator-lint-container || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always

orchestrator_docker_build:
  stage: build
  script:
    - cd ProcessorOrchestrator
    - docker build -t processor-orchestrator .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always

orchestrator_unit-testing:
  stage: unittest
  needs: [orchestrator_docker_build, orchestrator_container_removal]
  script:
    - docker run --name po-unit-testing processor-orchestrator pytest app/testing --junitxml=po-unit-report.xml
    - docker cp po-unit-testing:po-unit-report.xml po-unit-report.xml
  artifacts:
    reports:
      junit: po-unit-report.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always

orchestrator_linting:
  stage: linting
  needs: [orchestrator_docker_build, orchestrator_container_removal]
  allow_failure: true 
  script:
    - docker run -d -t --name orchestrator-lint-container processor-orchestrator
    - docker cp .pylintrc orchestrator-lint-container:/app
    - docker cp utility/pylint_ignore.py orchestrator-lint-container:/app/utility
    - docker cp utility/__init__.py orchestrator-lint-container:/app/utility
    - docker exec orchestrator-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
    - docker stop orchestrator-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always

interface_docker_build:
  stage: build
  script:
    - cd Interface
    - docker build -t interface -f Dockerfile.test .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/*
      when: always

interface_unit-testing:
  stage: unittest
  needs: [interface_docker_build]
  script:
    - docker run --name interface-unit-test-container interface
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - interface/*
      when: always

interface-linting:
  stage: linting
  needs: [interface_docker_build]
  allow_failure: true
  script:
    - cd Interface
    - docker build -t interface_linting -f Dockerfile_lint .
    - cd ..
    - docker run -d -t --name interface-lint-container interface_linting
    - docker cp .pylintrc interface-lint-container:/app
    - docker cp utility/pylint_ignore.py interface-lint-container:/app/utility
    - docker cp utility/__init__.py interface-lint-container:/app/utility
    - docker exec interface-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
    - docker stop interface-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/*
      when: always

interface_container_removal:
  stage: removal
  script:
    - docker rm -f interface-lint-container || true
    - docker rm -f interface-unit-test-container || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Interface/*
      when: always

forwarder_docker_build:
  stage: build
  script:
    - cd VideoForwarder
    - docker build -t forwarder -f Dockerfile_lint .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/*
      when: always

forwarder-linting:
  stage: linting
  needs: [forwarder_docker_build]
  allow_failure: true
  script:
    - cd VideoForwarder
    - docker build -t forwarder_linting -f Dockerfile_lint .
    - cd ..
    - docker run -d -t --name forwarder-lint-container forwarder_linting
    - docker cp .pylintrc forwarder-lint-container:/app
    - docker cp utility/pylint_ignore.py forwarder-lint-container:/app/utility
    - docker cp utility/__init__.py forwarder-lint-container:/app/utility
    - docker exec forwarder-lint-container python3.8 -m pylint app --rcfile=app/.pylintrc --output-format=colorized
    - docker stop forwarder-lint-container
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/*
      when: always

forwarder_container_removal:
  stage: removal
  script:
    - docker rm -f forwarder-lint-container || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - VideoForwarder/*
      when: always
