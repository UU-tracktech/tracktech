stages:
  - build
  - test
  - documentation
  - deploy

camera_processor_documentation:
  stage: documentation
  trigger:
    include: CameraProcessor/.gitlab-ci-docs.yml
  rules:
    - when: never
      changes:
        - CameraProcessor/*

camera-processor_docker_test_build:
  stage: build
  script:
    - cd CameraProcessor
    - docker build -f Dockerfile.test -t camera-processor-test .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always
        
camera-processor_unit-testing:
  stage: test
  needs: [camera-processor_docker_test_build]
  script:
    - cd CameraProcessor
    - docker container prune -f
    - docker run --name camera-processor-test-container camera-processor-test python3.8 -m pytest tests/unittests --junitxml=report.xml
    - docker cp camera-processor-test-container:/app/report.xml report.xml
  artifacts:
    reports:
      junit: CameraProcessor/report.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - CameraProcessor/*
      when: always

orchestrator_docker_build:
  stage: build
  script:
    - docker build -t processor-orchestrator --target testing ./ProcessorOrchestrator
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always

orchestrator_unit-testing:
  stage: test
  needs: [orchestrator_docker_build]
  script:
    - docker run processor-orchestrator
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ProcessorOrchestrator/*
      when: always
     

interface_docker_build:
  stage: build
  script:
    - cd interface
    - docker build -t interface -f Dockerfile.test .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - interface/*
      when: always

interface_unit-testing:
  stage: test
  needs: [interface_docker_build]
  script:
    - docker run interface
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - interface/*
      when: always

pylint:
  stage: test
  image: python:3.8-slim
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint-gitlab
  script:
    - pylint --rcfile=.pylintrc --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always
    
pages:
  stage: deploy
  image: alpine:latest
  script:
    - echo
  artifacts:
    paths:
      - public
  only:
    refs:
      - SPC-268_Add_pylint_to_CI_pipeline