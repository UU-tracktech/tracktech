events {

}


# RTMP configuration
rtmp {
  server {
    # Print to log so we can see what happens
    access_log /dev/stdout;
    
    # Listen for incoming stream on standard RTMP port
    listen 1935;

    # Set the chunk size
    chunk_size 4000;

    application pull {
      live on;
      # Run this from start (example)
      exec_static /usr/bin/ffmpeg -i rtsp://root:root@tracktech.ml:49999/axis-media/media.amp -vcodec libx264 -c:a aac -f flv rtmp://localhost/live/cam1;
      # exec_static /usr/bin/ffmpeg -i http://81.83.10.9:8001/mjpg/video.mjpg -vcodec libx264 -c:a aac -f flv rtmp://localhost/live/kitchen;

      # disable consuming the stream from nginx as rtmp
      deny play all;
    }
    application live {
	live on;
	exec /usr/bin/ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                             -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_low
                             -c:v libx264 -c:a libvo_aacenc -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_mid
                             -c:v libx264 -c:a libvo_aacenc -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_high
                             -c:v libx264 -c:a libvo_aacenc -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_hd720
                             -c copy -f flv rtmp://localhost/show/$name_src;	
    }    

    application show {
      live on;
      hls on;

      # Where to stream the data to locally
      hls_path /mnt/hls/;

      # Amount of seconds per fragment
      hls_fragment 1;

      # Amount of seconds total for playlist
      hls_playlist_length 60;

      # Instruct clients to adjust resolution according to bandwidth
      hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
      hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
      hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
      hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
      hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution

    }
  }
}

http {
  sendfile off;
  tcp_nopush on;

  directio 512;
  default_type application/octet-stream;

  # Print to log so we can see what happens
  access_log /dev/stdout;
  error_log /dev/stdout;

  server {
    listen 8080;

    location / {
      # Disable cache
      add_header 'Cache-Control' 'no-cache';

      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }

      root /mnt/;
    }
  }
}