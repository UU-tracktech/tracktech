{"version":3,"sources":["components/VideojsPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["VideoPlayer","player","videoNode","this","videojs","props","ready","dispose","console","log","className","data-vjs-player","ref","node","React","App","state","streams","a","fetch","json","config","setState","map","stream","name","Name","url","Forwarder","sources","srcObject","src","type","source","autoplay","controls","Component","process","REACT_APP_URL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSA0CeA,E,4MAnCHC,Y,IACAC,e,yDAER,WAEIC,KAAKF,OAASG,YAAQD,KAAKD,UAAWC,KAAKE,OAAOC,OAAM,iB,kCAO5D,WAAwB,IAAD,EACnB,UAAAH,KAAKF,cAAL,SAAaM,Y,oBAMjB,WAAU,IAAD,OAEL,OADAC,QAAQC,IAAI,UAER,sBAAKC,UAAU,WAAf,UACI,qBAAKA,UAAU,mBAAmBC,kBAAgB,OAAlD,SACI,uBAAOC,IAAK,SAACC,GAAD,OAA4B,EAAKX,UAAYW,GAAMH,UAAU,eAFjF,0B,GAvBcI,aCIpBC,G,wDAEJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CAAEC,QAAS,IAFP,E,4FAKnB,4BAAAC,EAAA,sEAC4BC,MAA+B,gBAD3D,8BAC4EC,OAD5E,OACMC,EADN,OAEElB,KAAKmB,SAAS,CAAEL,QAASI,EAAOE,KAAI,SAACC,GAAD,MAAa,CAAEC,KAAMD,EAAOE,KAAMC,IAAKH,EAAOI,gBAFpF,gD,0EAKA,WACE,IAAIC,EAAU1B,KAAKa,MAAMC,QAAQM,KAAI,SAACC,GAAD,MAAa,CAChDC,KAAMD,EAAOC,KACbK,UAAW,CACTC,IAAKP,EAAOG,IACZK,KAAM,6BAIV,OACE,qBAAKtB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAEImB,GAAWA,EAAQN,KAAI,SAACU,GAAD,OACrB,gCACE,6BAAKA,EAAOR,OACZ,cAAC,EAAD,CAA+BS,UAAU,EAAMC,UAAU,EAAMN,QAAS,CAACI,EAAOH,YAA9DG,EAAOR,oB,GA5BvBX,IAAMsB,YAqCxB5B,QAAQC,IAAI,oBACZD,QAAQC,IAAI,yBAA2B4B,mIAAYC,eAEpCvB,QCpCAwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f999950d.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport videojs from 'video.js';\r\n\r\n// Styles\r\nimport 'video.js/dist/video-js.css';\r\n\r\nclass VideoPlayer extends React.Component<videojs.PlayerOptions> {\r\n    private player?: videojs.Player;\r\n    private videoNode?: HTMLVideoElement;\r\n\r\n    componentDidMount() {\r\n        // instantiate video.js\r\n        this.player = videojs(this.videoNode, this.props).ready(function () {\r\n            //console.log('onPlayerReady')\r\n        })\r\n    }\r\n\r\n\r\n    // destroy player on unmount\r\n    componentWillUnmount() {\r\n        this.player?.dispose()\r\n    }\r\n\r\n    // wrap the player in a div with a `data-vjs-player` attribute\r\n    // so videojs won't create additional wrapper in the DOM\r\n    // see https://github.com/videojs/video.js/pull/3856\r\n    render() {\r\n        console.log(\"render\")\r\n        return (\r\n            <div className=\"c-player\">\r\n                <div className=\"c-player__screen\" data-vjs-player=\"true\">\r\n                    <video ref={(node: HTMLVideoElement) => this.videoNode = node} className=\"video-js\" />\r\n                </div>\r\n                {}                {/*<div className=\"c-player__controls\">\r\n                    <button>Play</button>\r\n                    <button>Pause</button>\r\n                </div>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideoPlayer;","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport VideoPlayer from \"./components/VideojsPlayer\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Stream } from 'node:stream';\r\n\r\ntype stream = { name: string, url: string }\r\ntype appState = { streams: stream[] }\r\n\r\nclass App extends React.Component<{}, appState> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { streams: [] }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    var config = await (await fetch(process.env.PUBLIC_URL + '/config.json')).json();\r\n    this.setState({ streams: config.map((stream) => ({ name: stream.Name, url: stream.Forwarder })) })\r\n  }\r\n\r\n  render() {\r\n    var sources = this.state.streams.map((stream) => ({\r\n      name: stream.name,\r\n      srcObject: {\r\n        src: stream.url,\r\n        type: 'application/x-mpegURL'\r\n      }\r\n    }))\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {\r\n            sources && sources.map((source) =>\r\n              <div>\r\n                <h1>{source.name}</h1>\r\n                <VideoPlayer key={source.name} autoplay={true} controls={true} sources={[source.srcObject]} />\r\n              </div>)\r\n          }\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconsole.log(\"test: \" + process.env.NODE_ENV)\r\nconsole.log(\"Environment variable: \" + process.env.REACT_APP_URL) //alle var moeten met REACT_APP_ beginnen\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}